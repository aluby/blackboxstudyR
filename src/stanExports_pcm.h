// Generated by rstantools.  Do not edit by hand.

/*
    blackboxstudyR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    blackboxstudyR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with blackboxstudyR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_pcm_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_pcm");
    reader.add_event(36, 34, "end", "model_pcm");
    return reader;
}

template <typename T1__, typename T2__>
typename boost::math::tools::promote_args<T1__, T2__>::type
pcm(const int& y,
        const T1__& theta,
        const Eigen::Matrix<T2__, Eigen::Dynamic,1>& beta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        validate_non_negative_index("unsummed", "(rows(beta) + 1)", (rows(beta) + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  unsummed(static_cast<Eigen::VectorXd::Index>((rows(beta) + 1)));
        (void) unsummed;  // dummy to suppress unused var warning

        stan::math::initialize(unsummed, DUMMY_VAR__);
        stan::math::fill(unsummed,DUMMY_VAR__);
        current_statement_begin__ = 4;
        validate_non_negative_index("probs", "(rows(beta) + 1)", (rows(beta) + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  probs(static_cast<Eigen::VectorXd::Index>((rows(beta) + 1)));
        (void) probs;  // dummy to suppress unused var warning

        stan::math::initialize(probs, DUMMY_VAR__);
        stan::math::fill(probs,DUMMY_VAR__);


        current_statement_begin__ = 5;
        stan::math::assign(unsummed, append_row(rep_vector(0.0,1),subtract(theta,beta)));
        current_statement_begin__ = 6;
        stan::math::assign(probs, softmax(cumulative_sum(unsummed)));
        current_statement_begin__ = 7;
        return stan::math::promote_scalar<fun_return_scalar_t__>(categorical_log((y + 1),probs));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pcm_functor__ {
    template <typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T1__, T2__>::type
    operator()(const int& y,
        const T1__& theta,
        const Eigen::Matrix<T2__, Eigen::Dynamic,1>& beta, std::ostream* pstream__) const {
        return pcm(y, theta, beta, pstream__);
    }
};

#include <stan_meta_header.hpp>
 class model_pcm : public prob_grad {
private:
    int I;
    int J;
    int N;
    vector<int> ii;
    vector<int> jj;
    vector<int> y;
public:
    model_pcm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_pcm(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_pcm_namespace::model_pcm";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "I", "int", context__.to_vec());
            I = int(0);
            vals_i__ = context__.vals_i("I");
            pos__ = 0;
            I = vals_i__[pos__++];
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 14;
            validate_non_negative_index("ii", "N", N);
            context__.validate_dims("data initialization", "ii", "int", context__.to_vec(N));
            validate_non_negative_index("ii", "N", N);
            ii = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("ii");
            pos__ = 0;
            size_t ii_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < ii_limit_0__; ++i_0__) {
                ii[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("jj", "N", N);
            context__.validate_dims("data initialization", "jj", "int", context__.to_vec(N));
            validate_non_negative_index("jj", "N", N);
            jj = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("jj");
            pos__ = 0;
            size_t jj_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < jj_limit_0__; ++i_0__) {
                jj[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
            validate_non_negative_index("y", "N", N);
            y = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                y[i_0__] = vals_i__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 11;
            check_greater_or_equal(function__,"I",I,1);
            current_statement_begin__ = 12;
            check_greater_or_equal(function__,"J",J,1);
            current_statement_begin__ = 13;
            check_greater_or_equal(function__,"N",N,1);
            current_statement_begin__ = 14;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"ii[k0__]",ii[k0__],1);
                check_less_or_equal(function__,"ii[k0__]",ii[k0__],I);
            }
            current_statement_begin__ = 15;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"jj[k0__]",jj[k0__],1);
                check_less_or_equal(function__,"jj[k0__]",jj[k0__],J);
            }
            current_statement_begin__ = 16;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"y[k0__]",y[k0__],0);
            }
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 19;
            validate_non_negative_index("beta", "2", 2);
            validate_non_negative_index("beta", "I", I);
            num_params_r__ += 2 * I;
            current_statement_begin__ = 20;
            validate_non_negative_index("theta", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 21;
            ++num_params_r__;
            current_statement_begin__ = 22;
            ++num_params_r__;
            current_statement_begin__ = 23;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_pcm() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "I", I);
        validate_non_negative_index("beta", "2", 2);
        context__.validate_dims("initialization", "beta", "vector_d", context__.to_vec(I,2));
        std::vector<vector_d> beta(I,vector_d(static_cast<Eigen::VectorXd::Index>(2)));
        for (int j1__ = 0U; j1__ < 2; ++j1__)
            for (int i0__ = 0U; i0__ < I; ++i0__)
                beta[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < I; ++i0__)
            try {
            writer__.vector_unconstrain(beta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("theta")))
            throw std::runtime_error("variable theta missing");
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "J", J);
        context__.validate_dims("initialization", "theta", "vector_d", context__.to_vec(J));
        vector_d theta(static_cast<Eigen::VectorXd::Index>(J));
        for (int j1__ = 0U; j1__ < J; ++j1__)
            theta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta: ") + e.what());
        }

        if (!(context__.contains_r("sigmaB")))
            throw std::runtime_error("variable sigmaB missing");
        vals_r__ = context__.vals_r("sigmaB");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigmaB", "double", context__.to_vec());
        double sigmaB(0);
        sigmaB = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigmaB);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigmaB: ") + e.what());
        }

        if (!(context__.contains_r("sigmaT")))
            throw std::runtime_error("variable sigmaT missing");
        vals_r__ = context__.vals_r("sigmaT");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigmaT", "double", context__.to_vec());
        double sigmaT(0);
        sigmaT = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigmaT);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigmaT: ") + e.what());
        }

        if (!(context__.contains_r("muB")))
            throw std::runtime_error("variable muB missing");
        vals_r__ = context__.vals_r("muB");
        pos__ = 0U;
        context__.validate_dims("initialization", "muB", "double", context__.to_vec());
        double muB(0);
        muB = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(muB);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable muB: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > beta;
            size_t dim_beta_0__ = I;
            beta.reserve(dim_beta_0__);
            for (size_t k_0__ = 0; k_0__ < dim_beta_0__; ++k_0__) {
                if (jacobian__)
                    beta.push_back(in__.vector_constrain(2,lp__));
                else
                    beta.push_back(in__.vector_constrain(2));
            }

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.vector_constrain(J,lp__);
            else
                theta = in__.vector_constrain(J);

            local_scalar_t__ sigmaB;
            (void) sigmaB;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmaB = in__.scalar_lb_constrain(0,lp__);
            else
                sigmaB = in__.scalar_lb_constrain(0);

            local_scalar_t__ sigmaT;
            (void) sigmaT;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmaT = in__.scalar_lb_constrain(0,lp__);
            else
                sigmaT = in__.scalar_lb_constrain(0);

            local_scalar_t__ muB;
            (void) muB;  // dummy to suppress unused var warning
            if (jacobian__)
                muB = in__.scalar_constrain(lp__);
            else
                muB = in__.scalar_constrain();


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body

            current_statement_begin__ = 26;
            for (int i = 1; i <= I; ++i) {
                current_statement_begin__ = 27;
                lp_accum__.add(normal_log<propto__>(get_base1(beta,i,"beta",1), muB, sigmaB));
            }
            current_statement_begin__ = 28;
            lp_accum__.add(normal_log<propto__>(theta, 0, sigmaT));
            current_statement_begin__ = 29;
            lp_accum__.add(normal_log<propto__>(muB, 0, 10));
            current_statement_begin__ = 30;
            lp_accum__.add(cauchy_log<propto__>(sigmaT, 0, 2.5));
            current_statement_begin__ = 31;
            lp_accum__.add(cauchy_log<propto__>(sigmaB, 0, 2.5));
            current_statement_begin__ = 32;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 33;
                lp_accum__.add(pcm(get_base1(y,n,"y",1),get_base1(theta,get_base1(jj,n,"jj",1),"theta",1),get_base1(beta,get_base1(ii,n,"ii",1),"beta",1), pstream__));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("theta");
        names__.push_back("sigmaB");
        names__.push_back("sigmaT");
        names__.push_back("muB");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(I);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_pcm_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<vector_d> beta;
        size_t dim_beta_0__ = I;
        for (size_t k_0__ = 0; k_0__ < dim_beta_0__; ++k_0__) {
            beta.push_back(in__.vector_constrain(2));
        }
        vector_d theta = in__.vector_constrain(J);
        double sigmaB = in__.scalar_lb_constrain(0);
        double sigmaT = in__.scalar_lb_constrain(0);
        double muB = in__.scalar_constrain();
            for (int k_1__ = 0; k_1__ < 2; ++k_1__) {
                for (int k_0__ = 0; k_0__ < I; ++k_0__) {
                vars__.push_back(beta[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(theta[k_0__]);
            }
        vars__.push_back(sigmaB);
        vars__.push_back(sigmaT);
        vars__.push_back(muB);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_pcm";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= I; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaB";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaT";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "muB";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= 2; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= I; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaB";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaT";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "muB";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef model_pcm_namespace::model_pcm stan_model;


#endif
